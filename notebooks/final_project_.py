# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lwCAm3gyq0rVw0ALoY0Wx1LLNb8bbkLV

*   Import necessory libraries
"""

import pandas as pd
import numpy as np

"""

*   Read the dataset

"""

from google.colab import drive
drive.mount('/content/drive')
df = pd.read_csv('/content/drive/MyDrive/Energy_dataset.csv')

"""

*   Identify Variables

"""

print(f'{df.dtypes}\n')
df['Type_of_Renewable_Energy'] = pd.Categorical(df['Type_of_Renewable_Energy'])
df['Grid_Integration_Level'] = pd.Categorical(df['Grid_Integration_Level'])
df['Funding_Sources'] = pd.Categorical(df['Funding_Sources'])
print(df.dtypes)

"""# Numerical Analysis

"""

pd.options.display.float_format = '{:.2f}'.format

numeric_df = df.select_dtypes(include = 'number')
categorical_col = df.select_dtypes(include = 'category')

summary = df.describe()
mean = numeric_df.mean()
median = numeric_df.median()
mode = df.mode().iloc[0]
range = (numeric_df.max() - numeric_df.min())
variance = numeric_df.var()

print(f'Summary:\n{summary}\n')
print(f'Mean:\n{mean}\n')
print(f'Median:\n{median}\n')
print(f'Mode:\n{mode}\n')
print(f'Range:\n{range}\n')
print(f'Variance:\n{variance}\n')

"""
#   Visualization





"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style='whitegrid')

"""1.   Types of Renewable Energy"""

energy_type_mapping = {
    1: 'Solar',
    2: 'Wind',
    3: 'Hydroelectric',
    4: 'Geothermal',
    5: 'Biomass',
    6: 'Tidal',
    7: 'Wave'
}
df['Type_of_Renewable_Energy_Label'] = df['Type_of_Renewable_Energy'].map(energy_type_mapping)

plt.figure(figsize = (10,6))
ax = sns.countplot(x=df['Type_of_Renewable_Energy_Label'], color='darkslategray')
plt.title(f'Types of Renewable Energy')

plt.ylim(2000, 2250)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming you have a DataFrame df
# Define the categories and their labels
categories = pd.Categorical(df['Type_of_Renewable_Energy'],
                            categories=[1, 2, 3, 4, 5, 6, 7],
                            ordered=True)
categories = categories.rename_categories(['Solar', 'Wind', 'Hydroelectric', 'Geothermal', 'Biomass', 'Tidal', 'Wave'])

# Assign the categorical data back to the DataFrame
df['Type_of_Renewable_Energy_Label'] = categories

# Now plot
plt.figure(figsize=(10,6))
ax = sns.countplot(x=df['Type_of_Renewable_Energy_Label'], color='darkslategray')
plt.title('Types of Renewable Energy')

plt.ylim(2000, 2250)
plt.show()

"""

2.   Installed Capacity

"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Installed_Capacity_MW'], kde=True, color='darkslategray')
plt.title('Distribution of Installed Capacity')
plt.ylim(500, 700)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Installed_Capacity_MW'], color='darkslategray')
plt.title('Box Plot of Installed Capacity')
plt.show()

"""3. Energy Production"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Energy_Production_MWh'], kde=True, color='darkslategray')
plt.title('Distribution of Energy Production')
plt.ylim(500, 650)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Energy_Production_MWh'], color='darkslategray')
plt.title('Box Plot of Energy Production')
plt.show()

"""4. Energy Consumption"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Energy_Consumption_MWh'], kde=True, color='darkslategray')
plt.title('Distribution of Energy Consumption')
plt.ylim(500, 650)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Energy_Consumption_MWh'], color='darkslategray')
plt.title('Box Plot of Energy Consumption')
plt.show()

"""5. Energy Storage Capacity"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Energy_Storage_Capacity_MWh'], kde=True, color='darkslategray')
plt.title('Distribution of Energy Storage Capacity')
plt.ylim(500, 640)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Energy_Storage_Capacity_MWh'], color='darkslategray')
plt.title('Box Plot of Energy Storage Capacity')
plt.show()

"""6. Storage Efficiency"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Storage_Efficiency_Percentage'], kde=True, color='darkslategray')
plt.title('Distribution of Storage Efficiency')
plt.ylim(500, 700)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Storage_Efficiency_Percentage'], color='darkslategray')
plt.title('Box Plot of Storage Efficiency')
plt.show()

"""7. Grid Integration Levels"""

grid_integration_mapping = {
    1: 'Fully Integrated',
    2: 'Partially Integrated',
    3: 'Minimal Integration',
    4: 'Isolated Microgrid'
}
df['Grid_Integration_Level_Label'] = df['Grid_Integration_Level'].map(grid_integration_mapping)

plt.figure(figsize=(10, 6))
ax = sns.countplot(x=df['Grid_Integration_Level_Label'], color='darkslategray')
plt.title('Grid Integration Levels')

plt.ylim(3600, 3900)
plt.show()

"""8. Initial Investment"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Initial_Investment_USD'], kde=True, color='darkslategray')
plt.title('Distribution of Initial Investment')
plt.ylim(500, 680)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Initial_Investment_USD'], color='darkslategray')
plt.title('Box Plot of Initial Investment')
plt.show()

"""9. Funding Sources"""

funding_sources_mapping = {
    1: 'Government',
    2: 'Private',
    3: 'Public-Private Partnership'
}
df['Funding_Sources_Label'] = df['Funding_Sources'].map(funding_sources_mapping)

plt.figure(figsize=(10, 6))
ax = sns.countplot(x=df['Funding_Sources_Label'], color='darkslategray')
plt.title('Funding Sources')

plt.ylim(4700, 5100)
plt.show()

"""10. Financial Incentives"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Financial_Incentives_USD'], kde=True, color='darkslategray')
plt.title('Distribution of Financial Incentives')
plt.ylim(500, 680)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Financial_Incentives_USD'], color='darkslategray')
plt.title('Box Plot of Financial Incentives')
plt.show()

"""11. GHG Emission Reduction tCO2e"""

plt.figure(figsize=(10, 6))
sns.histplot(df['GHG_Emission_Reduction_tCO2e'], kde=True, color='darkslategray')
plt.title('Distribution of GHG Emission Reduction tCO2e')
plt.ylim(500, 680)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['GHG_Emission_Reduction_tCO2e'], color='darkslategray')
plt.title('Box Plot of GHG Emission Reduction tCO2e')
plt.show()

"""12. Air Pollution Reduction"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Air_Pollution_Reduction_Index'], kde=True, color='darkslategray')
plt.title('Distribution of Air Pollution Reduction')
plt.ylim(500, 660)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Air_Pollution_Reduction_Index'], color='darkslategray')
plt.title('Box Plot of Air Pollution Reduction')
plt.show()

"""

```
# This is formatted as code
```

13. Jobs Created"""

plt.figure(figsize=(10, 6))
sns.histplot(df['Jobs_Created'], kde=False, color='darkslategray')
plt.title('Histogram for Jobs Created')
plt.ylim(540, 660)
plt.show()

jobs_by_energy_type = df.groupby('Type_of_Renewable_Energy')['Jobs_Created'].sum()

labels = [energy_type_mapping[int(i)] for i in jobs_by_energy_type.index]

sns.set_palette("deep")
plt.figure(figsize=(8, 8))
plt.pie(jobs_by_energy_type.values, labels=labels, autopct='%1.1f%%')
plt.title('Jobs Created by Renewable Energy Type')
plt.axis('equal')
plt.show()

"""# Cleaning Data

*   checking for duplicate rows
"""

duplicates = df[df.duplicated()]

if not duplicates.empty:
    df = df.drop_duplicates()
    print('Duplicate rows have been removed.')
else:
    print('No duplicate rows found.')

"""

*   checking for outliers

"""

def identify_outliers(df, columns, threshold = 1.5):
  outliers_dict = {}
  for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - threshold * IQR
    upper_bound = Q3 + threshold * IQR
    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

    if not outliers.empty:
        outliers_dict[col] = outliers
        print(f"Outliers in {col}:\n{outliers[[col]]}")
    else:
        print(f"No outliers found in {col}.")

  return outliers_dict

outliers_dict = identify_outliers(df, numeric_df)

"""# Handling Missing Values"""

df.info()

"""# Standardizing"""

from sklearn.preprocessing import StandardScaler

df2 = df.copy(deep = True)
numeric_columns = df2.select_dtypes(include=['float64', 'int64']).columns
scaler = StandardScaler()

df2[numeric_columns] = scaler.fit_transform(df2[numeric_columns])
df2.head()

"""# Correlation Matrix"""

correlation_matrix = df.drop(columns = ['Type_of_Renewable_Energy_Label',	'Grid_Integration_Level_Label',	'Funding_Sources_Label']).corr()

plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot = True, annot_kws={"size": 9}, cmap="crest", linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

"""# Scatter Plots"""

sns.set_theme(style="ticks")
sns.pairplot(numeric_df)

"""# Statistical Tests

contingency tables
"""

from scipy.stats import chi2_contingency

contingency_table1 = pd.crosstab(df['Type_of_Renewable_Energy'], df['Grid_Integration_Level'])

chi2, p, dof, expected = chi2_contingency(contingency_table1)
print(f'Chi2: {chi2}, p-value: {p}, Degrees of freedom: {dof}')

plt.figure(figsize=(8,8))
sns.heatmap(contingency_table1, annot=True, fmt='d', cmap='YlGnBu')
plt.title('Contingency Table Heatmap: Type of Renewable Energy vs Grid Integration Level')
plt.xlabel('Grid Integration Level')
plt.ylabel('Type of Renewable Energy')
plt.show()

contingency_table2 = pd.crosstab(df['Type_of_Renewable_Energy'],df['Funding_Sources'])

chi2, p, dof, expected = chi2_contingency(contingency_table2)
print(f'Chi2: {chi2}, p-value: {p}, Degrees of freedom: {dof}')

plt.figure(figsize=(8,8))
sns.heatmap(contingency_table2, annot=True, fmt='d', cmap='YlGnBu')
plt.title('Contingency Table Heatmap: Type of Renewable Energy vs Funding Sources')
plt.xlabel('Funding Sources')
plt.ylabel('Type of Renewable Energy')
plt.show()

contingency_table3 = pd.crosstab(df['Grid_Integration_Level'],df['Funding_Sources'])

chi2, p, dof, expected = chi2_contingency(contingency_table3)
print(f'Chi2: {chi2}, p-value: {p}, Degrees of freedom: {dof}')
print(contingency_table3)
plt.figure(figsize=(8,8))
sns.heatmap(contingency_table3, annot=True, fmt='d', cmap='YlGnBu')
plt.title('Contingency Table Heatmap: Grid Integration Level vs Funding Sources')
plt.xlabel('Funding Sources')
plt.ylabel('Grid Integration Level')
plt.show()

"""# Line Graphs"""

variables = ['Installed_Capacity_MW','Storage_Efficiency_Percentage', 'Initial_Investment_USD', 'Financial_Incentives_USD']

plt.figure(figsize=(15, 10))
for variable in variables:
  sns.lineplot(x='Grid_Integration_Level_Label', y=variable, data=df2, marker='o', label=variable)

plt.xlabel('Grid Integration Level')
plt.ylabel('Value')
plt.title('Relationship between Grid Integration Level and other Variables')
plt.legend()
plt.grid(True)
plt.show()

variables = ['Installed_Capacity_MW', 'Energy_Production_MWh', 'Energy_Consumption_MWh', 'Energy_Storage_Capacity_MWh',
             'Storage_Efficiency_Percentage','Air_Pollution_Reduction_Index']

plt.figure(figsize=(15, 10))
for variable in variables:
  sns.lineplot(x='Type_of_Renewable_Energy_Label', y=variable, data=df2, marker='o', label=variable)

plt.xlabel('Grid Integration Level')
plt.ylabel('Value')
plt.title('Relationship between Type of Renewable Energy and other Variables')
plt.legend()
plt.grid(True)
plt.show()

variables = ['Installed_Capacity_MW', 'Energy_Production_MWh', 'Energy_Consumption_MWh', 'Energy_Storage_Capacity_MWh',
             'Storage_Efficiency_Percentage', 'Initial_Investment_USD', 'Financial_Incentives_USD', 'GHG_Emission_Reduction_tCO2e',
             'Air_Pollution_Reduction_Index', 'Jobs_Created']

plt.figure(figsize=(15, 10))
for variable in variables:
  sns.lineplot(x='Funding_Sources_Label', y=variable, data=df2, marker='o', label=variable)

plt.xlabel('Funding Sources')
plt.ylabel('Value')
plt.title('Relationship between Funding Sources and other Variables')
plt.legend()
plt.grid(True)
plt.show()

"""# Advanced Visualizations

*   Violin Plot
"""

plt.figure(figsize=(10, 6))
sns.violinplot(x='Type_of_Renewable_Energy_Label', y='Energy_Production_MWh', data=df, color='lightblue')
plt.title('Violin Plot of Energy Production by Type of Renewable Energy')
plt.show()

"""

*   Density Plot


"""

plt.figure(figsize=(10, 6))
sns.kdeplot(df['Energy_Production_MWh'], shade=True, label='Energy Production')
sns.kdeplot(df['Energy_Consumption_MWh'], shade=True, label='Energy Consumption')
plt.title('Density Plot of Energy Production and Consumption')
plt.legend()
plt.show()

"""

*   Network Graph

"""

import networkx as nx

G = nx.Graph()

energy_types = df['Type_of_Renewable_Energy'].unique()
for energy_type in energy_types:
    G.add_node(energy_type, type='energy')

attributes = ['Jobs_Created', 'Energy_Production_MWh']
for attribute in attributes:
    G.add_node(attribute, type='attribute')

for energy_type in energy_types:
    subset = df[df['Type_of_Renewable_Energy'] == energy_type]
    for attribute in attributes:
        if subset[attribute].sum() > 0:
            G.add_edge(energy_type, attribute, weight=subset[attribute].sum())

plt.figure(figsize=(15, 15))
pos = nx.spring_layout(G, k=0.3, iterations=300, seed=42)

node_colors = ['skyblue' if G.nodes[node]['type'] == 'energy' else 'lightgreen' for node in G.nodes()]
nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=3000, edgecolors='k', linewidths=1.5)

nx.draw_networkx_edges(G, pos, width=2)

nx.draw_networkx_labels(G, pos, font_size=12, font_weight='bold')

edge_labels = {(u, v): G[u][v]['weight'] for u, v in G.edges()}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=10)

plt.title('Network Graph of Renewable Energy Types and Attributes')
plt.show()